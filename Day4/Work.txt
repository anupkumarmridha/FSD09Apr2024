public - can access every where
private - Only inside class
protected - Inherited classes can access
internal - Inside the same assembly

protected internal
private protected


PE - Protable Executable
     Assembly
Class
Object
Populate object
Properties
Behaviour
Access Specifier
Constructor
Parameterized constructor


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UnderstandingBasicsApp.Models
{
    class Employee
    {
       // int id;
        //public int GetId()
        //{
        //    return id;
        //}
        //public void PutId(int eid)
        //{
        //    id = eid;
        //}
        //public int Id
        //{
        //    get { return id; }
        //    set { id = value; }
        //}
        //public int Id
        //{
        //    get => id;
        //    set => id = value;
        //}
          public int Id { get; set; }
          public string Name { get; set; }
          public void Work()
          {
              Id = 101;
              Console.WriteLine("Work");
          }
    }
}

using UnderstandingBasicsApp.Models;

namespace UnderstandingBasicsApp
{
    class Program
    {
        static void Main(string[] args)
        {
              Employee employee = new Employee();
              employee.Name = "Ramu";
              employee.Salary = 10000;
              employee.DateOfBirth = new DateTime(2000, 12, 18);
              employee.Email = "ramu@abccorp.com";
              Employee employee2 = new Employee
              {
                  Name = "Somu",
                  DateOfBirth = new DateTime(2000, 3, 6),
                  Email = "somu@abccorp.com",
                  Salary=40000
              };

              Console.WriteLine(employee2.Salary);
              employee.Work();
          }
    }
}
using Microsoft.VisualBasic;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UnderstandingBasicsApp.Models
{
    class Employee
    {
        double salary;

        public string Name { get; set; }

        public double Salary
        {
            set
            {
                salary = value;
            }
            get
            {
                return (salary-(salary*10/100));
            }
        }
        public DateTime DateOfBirth { get; set; }
        public  string Email { get; set; }
        public void Work()
        {
            Console.WriteLine("Works");
        }
    }
}
using UnderstandingBasicsApp.Models;

namespace UnderstandingBasicsApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Employee employee = new Employee();
            employee.Name = "Ramu";
            employee.Salary = 10000;
            employee.DateOfBirth = new DateTime(2000, 12, 18);
            employee.Email = "ramu@abccorp.com";
            Employee employee2 = new Employee(101)
            {
                Name = "Somu",
                DateOfBirth = new DateTime(2000, 3, 6),
                Email = "somu@abccorp.com",
                Salary=40000
            };
            Employee employee3 = new Employee(103, "Bimu", 123423, new DateTime(2000, 05, 07), "bimu@abcorp.com");
            Console.WriteLine(employee3.Id + " "+employee3.Name);
            
            employee.Work();
        }
    }
}
using Microsoft.VisualBasic;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UnderstandingBasicsApp.Models
{
    class Employee
    {

        double salary;
        public int Id { get; private set; }

        public string Name { get; set; }

        public double Salary
        {
            set
            {
                salary = value;
            }
            get
            {
                return (salary-(salary*10/100));
            }
        }
        public DateTime DateOfBirth { get; set; }
        public  string Email { get; set; }

        public Employee()
        {
            Id = 0;
            Name= string.Empty;
            Email = string.Empty;
            DateOfBirth = DateTime.MinValue;
            Salary = 0;
        }

        public Employee(int id)
        {
            Id = id;
        }

        public Employee(int id, string name, double salary, DateTime dateOfBirth, string email) : this(id)
        {
            Name = name;
            Salary = salary;
            DateOfBirth = dateOfBirth;
            Email = email;
        }

        public void Work()
        {
            Console.WriteLine("Works");
        }
    }
}
using UnderstandingBasicsApp.Models;

namespace UnderstandingBasicsApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Employee employee = new Employee();
            employee.Name = "Ramu";
            employee.Salary = 10000;
            employee.DateOfBirth = new DateTime(2000, 12, 18);
            employee.Email = "ramu@abccorp.com";
            Employee employee2 = new Employee(101)
            {
                Name = "Somu",
                DateOfBirth = new DateTime(2000, 3, 6),
                Email = "somu@abccorp.com",
                Salary = 40000
            };

            Employee employee3 = new Employee(103, "Bimu", 123423, new DateTime(2000, 05, 07), "bimu@abcorp.com");
            Console.WriteLine(employee3.Id + " " + employee3.Name);
            employee3.PrintEmployeeDetails();
            employee.Work(7);
        }
    }
}
using Microsoft.VisualBasic;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UnderstandingBasicsApp.Models
{
    class Employee
    {

        double salary;
        public int Id { get; private set; }

        public string Name { get; set; }

        public double Salary
        {
            set
            {
                salary = value;
            }
            get
            {
                return (salary-(salary*10/100));
            }
        }
        public DateTime DateOfBirth { get; set; }
        public  string Email { get; set; }

        public Employee()
        {
            Id = 0;
            Name= string.Empty;
            Email = string.Empty;
            DateOfBirth = DateTime.MinValue;
            Salary = 0;
        }

        public Employee(int id)
        {
            Id = id;
        }
        /// <summary>
        /// Parameterized constructor
        /// </summary>
        /// <param name="id">Employee Id</param>
        /// <param name="name">Employee Name as string</param>
        /// <param name="salary">Employee salary without TDS deduction</param>
        /// <param name="dateOfBirth">Date of birth</param>
        /// <param name="email">Office Email</param>
        public Employee(int id, string name, double salary, DateTime dateOfBirth, string email) : this(id)
        {
            Name = name;
            Salary = salary;
            DateOfBirth = dateOfBirth;
            Email = email;
        }
        /// <summary>
        /// Prints all teh details of employee
        /// </summary>
        public void PrintEmployeeDetails()
        {
            Console.WriteLine($"Employee Id\t:\t{Id}");
            Console.WriteLine($"Employee name\t:\t{Name}");
            Console.WriteLine($"Employee Date Of Birth\t:\t{DateOfBirth}");
            Console.WriteLine($"Employee Salary\t:\tRs.{Salary}");
            Console.WriteLine($"Employee Email\t:\t{Email}");
        }
        /// <summary>
        /// Displays the work done in the duration
        /// </summary>
        /// <param name="hours">Hors required for work</param>
        /// <returns>Message on hours worked</returns>
        public string Work(int hours)
        {
            Console.WriteLine("Works");
            return $"Done work for {hours} Hours";
        }
    }
}
using UnderstandingBasicsApp.Models;

namespace UnderstandingBasicsApp
{
    class Program
    {
        
        static void Main(string[] args)
        {
            int[] ages = new int[3];
            ages[0] = 102;
            ages[1] = 23;
            ages[2] = 45;
            for (int i = 0; i < ages.Length; i++)
            {
                Console.WriteLine(ages[i]);
            }
        }
    }
}
using UnderstandingBasicsApp.Models;

namespace UnderstandingBasicsApp
{
    class Program
    {
        
        static void Main(string[] args)
        {
            int[] ages = new int[3];
            ages[0] = 102;
            ages[1] = 23;
            ages[2] = 45;
            int count = ages.Length-1;
            while (count >= 0)
            {
                Console.WriteLine(ages[count]);
                count--;
            }
        }
    }
}
using UnderstandingBasicsApp.Models;

namespace UnderstandingBasicsApp
{
    class Program
    {
        
        static void Main(string[] args)
        {
            int[] ages = new int[3];
            ages[0] = 102;
            ages[1] = 23;
            ages[2] = 45;
            int count = ages.Length-1;
            do
            {
                Console.WriteLine(ages[count]);
                count--;
            } while(count >= 0);
        }
    }
}
using UnderstandingBasicsApp.Models;

namespace UnderstandingBasicsApp
{
    class Program
    {
        
        static void Main(string[] args)
        {
            int[] ages = new int[3];
            ages[0] = 102;
            ages[1] = 23;
            ages[2] = 45;
            int count = ages.Length-1;
            do
            {
                if (ages[count]>100)
                    Console.Write("Wow ");

                Console.WriteLine(ages[count]);
                count--;
            } while(count >= 0);
        }
    }
}
using UnderstandingBasicsApp.Models;

namespace UnderstandingBasicsApp
{
    class Program
    {
        Employee CreateEmployeeByTakingDetailsFromConsole(int id)
        {
            Employee employee = new Employee(id);
            Console.WriteLine("Please enter the emplyee name");
            employee.Name = Console.ReadLine();
            Console.WriteLine("Please enterthe employee Date of Birth");
            employee.DateOfBirth = Convert.ToDateTime(Console.ReadLine());
            Console.WriteLine("Please enter the employee salary");
            double salary;
            while(!double.TryParse(Console.ReadLine(),out salary)){
                Console.WriteLine("Invalid entry. Please try again.");
            }
            employee.Salary = salary;
            Console.WriteLine("Please enter the employee email");
            employee.Email = Console.ReadLine();
            return employee;
        }
        
        static void Main(string[] args)
        {
            Program program = new Program();
            Employee[] employees = new Employee[3];
            for (int i = 0; i < employees.Length; i++)
            {
                employees[i] = program.CreateEmployeeByTakingDetailsFromConsole(101+i);
            }
            for (int i = 0;i < employees.Length; i++)
            {
                employees[i].PrintEmployeeDetails();
            }
        }
    }
}
