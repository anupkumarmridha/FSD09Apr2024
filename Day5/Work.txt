https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet

namespace RequestTrackerApplication
{
    internal class Program
    {
        void UnderstandingSequenceStatments()
        {
            Console.WriteLine("Hello");
            Console.WriteLine("Hi");
            int num1, num2;
            num1 = 100;
            num2 = 20;
            int num3 = num1 / num2;
            Console.WriteLine($"The result of {num1} divided by {num2} is {num3}");
        }
        void UnderstandingSelectionWithIf()
        {
            string strName = "Ramu";
            if (strName == "Ramu")
            {
                Console.WriteLine("Welcome Ramu. you are authorized");
                Console.WriteLine("Bingo!!");
            }
            else if(strName=="Somu")
                Console.WriteLine("You are Somu not Ramu. ONly Basic access");
            else
                Console.WriteLine("I don't know who you are. Get out...");
        }
        void UnderstandingSwitchCase()
        {
            Console.WriteLine("Please enter a number for day");
            int choice = Convert.ToInt32(Console.ReadLine());
            switch (choice)
            {
                case 1: Console.WriteLine("Monday");
                    break;
                case 2:
                    Console.WriteLine("Tuesday");
                    break;
                case 3:
                    Console.WriteLine("Wednesday");
                    break;
                case 4:
                    Console.WriteLine("Thursday");
                    break;
                case 5:
                    Console.WriteLine("Friday");
                    break;
                case 6:
                case 7:
                    Console.WriteLine("Weekend");
                    break;
                default:
                    Console.WriteLine("You dont know the numberof days in a week???");
                    break;
            }
        }
        void UnderstandingIterationWithFor()
        {
            for (int i = 0; i < 5; i = i + 2)
            {
                Console.WriteLine("Hello "+i);
               
            }
        }
        void UnderstandingIterationWithWhile()
        {
            int count = 10;
            while (count > 0)
            {
                count--;
                if (count==7)
                    continue;
                Console.WriteLine("Thje value of count is " + count);
                if (count == 4)
                    break;
         
            }
        }
        void UnderstandingIterationWithDoWhile()
        {
            int count = -1;
            do
            {
                Console.WriteLine("In Do while the value is  "+count);
                Console.WriteLine("Please enter the number");
                count = Convert.ToInt32(Console.ReadLine());
            } while (count >0);
        }
        static void Main(string[] args)
        {
           Program program = new Program();
            //program.UnderstandingSequenceStatments();
            //program.UnderstandingSelectionWithIf();
            //program.UnderstandingSwitchCase();
            //program.UnderstandingIterationWithWhile();
            program.UnderstandingIterationWithDoWhile();

        }
    }
}

----------------------------------------------------------------------------------

From a given array find the three digit numbers that have the same number. Example -444

 void UnderstandingArray()
 {
     int[] numbers = { 22, 67, 99, 77, 66, 68 };
     int countOfRepeatingNumbers = 0;
     for (int i = 0; i < numbers.Length; i++)
     {
         int firstNumber,secondNumber;
         firstNumber = numbers[i] / 10;
         secondNumber = numbers[i] % 10;
         if (firstNumber == secondNumber)
             countOfRepeatingNumbers++;
     }
     Console.WriteLine("The number of repeating numbers is "+countOfRepeatingNumbers);
 }


Create the model
Create methdos for CRUD
---MEthods to build employee
---Method to add all emploeyes(dependednt on Build employee)
---Method to print EMployee
---Method to iterate through all employee and print(Dependt on print employee)
--Method to Get employee ID
---MEthdo to search EMployee
---Methdos to take id and search EMployee and printd(dependent on GetEmployeeID,SearchEmployee and PrintEmployee)
---Method to Update Name(Dependent on GetEmnployeeId, SearchEmployee,PrintEmployee)
---Methdo to delete employee(Note - Make the array reff as null)(Dependent on GetEmnployeeId, SearchEmployee,PrintEmployee)


Create menu
Create method to work with menu


using RequestTrackerModelLibrary;

namespace RequestTrackerApplication
{
    internal class Program
    {
        Employee[] employees;
        public Program()
        {
            employees = new Employee[3];
        }
        void PrintMenu()
        {
            Console.WriteLine("1. Add Employee");
            Console.WriteLine("2. Print Employees");
            Console.WriteLine("3. Search Employee by ID");
            Console.WriteLine("0. Exit");
        }
        void EmployeeInteraction()
        {
            int choice = 0;
            do
            {
                PrintMenu();
                Console.WriteLine("Please select an option");
                choice = Convert.ToInt32(Console.ReadLine());
                switch (choice)
                {
                    case 0:
                        Console.WriteLine("Bye.....");
                        break;
                    case 1:
                        AddEmployee();
                        break;
                    case 2:
                        PrintAllEmployees();
                        break;
                    case 3:
                        SearchAndPrintEmployee();
                        break;
                    default:
                        Console.WriteLine("Invalid choice. Try again");
                        break;
                }
            } while (choice !=0);
        }
        void AddEmployee()
        {
            if(employees[employees.Length - 1] != null)
            {
                Console.WriteLine("Sorry we have reached the maximum number of employees");
                return;
            }
            for(int i = 0; i < employees.Length; i++)
            {
                if (employees[i] == null)
                {
                    employees[i] = CreateEmployee(i);
                }
            }
                
        }
        void PrintAllEmployees()
        {
            if (employees[0] == null)
            {
                Console.WriteLine("No Employees available");
                return;
            }
            for(int i = 0;i < employees.Length;i++)
            {
                if (employees[i] != null)
                    PrintEmployee(employees[i]);
            }
        }
        Employee CreateEmployee(int id)
        {
            Employee employee = new Employee();
            employee.Id = 101+ id;
            employee.BuildEmployeeFromConsole();
            return employee;
        }

        void PrintEmployee(Employee employee)
        {
            Console.WriteLine("---------------------------");
            employee.PrintEmployeeDetails();
            Console.WriteLine("---------------------------");
        }
        int GetIdFromConsole()
        {
            int id = 0;
            Console.WriteLine("Please enter the employee Id");
            while(!int.TryParse(Console.ReadLine(), out id))
            {
                Console.WriteLine("Invalid entry. Please try again");
            }
            return id;
        }
        void SearchAndPrintEmployee()
        {
            Console.WriteLine("Print One employee");
            int id = GetIdFromConsole();
            Employee employee = SearchEmployeeById(id);
            if(employee == null)
            {
                Console.WriteLine("No such Employee is present");
                return;
            }
            PrintEmployee(employee);
        }
        Employee SearchEmployeeById(int id)
        {
            Employee employee = null;
            for (int i = 0; i < employees.Length; i++)
            {
               // if ( employees[i].Id == id && employees[i] != null)//Will lead to exception
               if (employees[i] != null && employees[i].Id == id)
                {
                    employee = employees[i];
                    break;
                }
            }
            return employee;
        }

        static void Main(string[] args)
        {
           Program program = new Program();
            program.EmployeeInteraction();
        }
    }
}
namespace RequestTrackerModelLibrary
{
    public class Employee
    {
        int age;
        DateTime dob;
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public int Age
        {
            get
            {
                return age;
            } 
        }
        public DateTime DateOfBirth { get =>dob; 
            set {
                dob = value;
                age =((DateTime.Today - dob).Days)/365;
            } }
        public double Salary { get; set; }

        public Employee()
        {
            Id = 0;
            Name = string.Empty;
            Salary = 0.0;
            DateOfBirth = new DateTime();
        }
        public Employee(int id, string name, DateTime dateOfBirth, double salary)
        {
            Id = id;
            Name = name;
            DateOfBirth = dateOfBirth;
            Salary = salary;
        }

        public void BuildEmployeeFromConsole()
        {
            Console.WriteLine("Please enter the Name");
            Name = Console.ReadLine()??String.Empty;
            Console.WriteLine("Please enter the Date of birth");
            DateOfBirth = Convert.ToDateTime(Console.ReadLine());
            Console.WriteLine("Please enter the Basic Salary");
            Salary = Convert.ToDouble(Console.ReadLine());
        }

        public void PrintEmployeeDetails()
        {
            Console.WriteLine("Employee Id : "+Id);
            Console.WriteLine("Employee Name "+Name);
            Console.WriteLine("Date of birth : "+DateOfBirth);
            Console.WriteLine("Employee Age : "+Age);
            Console.WriteLine("Employee Salary : Rs."+Salary);
        }
    }
}


